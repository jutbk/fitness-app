// <auto-generated />
using System;
using FitnessApp.Server.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FitnessApp.Server.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241103104744_AddIdentityTables")]
    partial class AddIdentityTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FitnessApp.Server.Models.Abonnement", b =>
                {
                    b.Property<int>("AbonnementId")
                        .HasColumnType("int")
                        .HasColumnName("abonnement_id");

                    b.Property<string>("AbonnementDuree")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("abonnement_duree");

                    b.Property<decimal>("AbonnementPrix")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("abonnement_prix");

                    b.Property<string>("AbonnementType")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("abonnement_type");

                    b.HasKey("AbonnementId");

                    b.ToTable("Abonnement", (string)null);
                });

            modelBuilder.Entity("FitnessApp.Server.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("FitnessApp.Server.Models.Coach", b =>
                {
                    b.Property<int>("CoachId")
                        .HasColumnType("int")
                        .HasColumnName("coach_id");

                    b.Property<string>("CoachFirstname")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("coach_firstname");

                    b.Property<string>("CoachLastname")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("coach_lastname");

                    b.Property<string>("CoachSpecialite")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("coach_specialite");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("CoachId");

                    b.ToTable("Coach", (string)null);
                });

            modelBuilder.Entity("FitnessApp.Server.Models.Cours", b =>
                {
                    b.Property<int>("CoursId")
                        .HasColumnType("int")
                        .HasColumnName("cours_id");

                    b.Property<int>("CoachId")
                        .HasColumnType("int")
                        .HasColumnName("coach_id");

                    b.Property<DateOnly>("CoursDate")
                        .HasColumnType("date")
                        .HasColumnName("cours_date");

                    b.Property<TimeOnly>("CoursHeureDebut")
                        .HasColumnType("time")
                        .HasColumnName("cours_heure_debut");

                    b.Property<TimeOnly>("CoursHeureFin")
                        .HasColumnType("time")
                        .HasColumnName("cours_heure_fin");

                    b.Property<string>("CoursName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("cours_name");

                    b.HasKey("CoursId");

                    b.HasIndex("CoachId");

                    b.ToTable("Cours");
                });

            modelBuilder.Entity("FitnessApp.Server.Models.Membre", b =>
                {
                    b.Property<int>("MembreId")
                        .HasColumnType("int")
                        .HasColumnName("membre_id");

                    b.Property<int?>("AbonnementId")
                        .HasColumnType("int")
                        .HasColumnName("abonnement_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("MembreEmail")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("membre_email");

                    b.Property<string>("MembreFirstname")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("membre_firstname");

                    b.Property<string>("MembreLastname")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("membre_lastname");

                    b.Property<string>("MembrePhonenumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("membre_phonenumber");

                    b.Property<string>("MembreStatutAbonnement")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("membre_statut_abonnement");

                    b.HasKey("MembreId");

                    b.HasIndex("AbonnementId");

                    b.HasIndex(new[] { "MembreEmail" }, "AK_Membre")
                        .IsUnique();

                    b.ToTable("Membre", (string)null);
                });

            modelBuilder.Entity("FitnessApp.Server.Models.Paiement", b =>
                {
                    b.Property<int>("PaiementId")
                        .HasColumnType("int")
                        .HasColumnName("paiement_id");

                    b.Property<int>("MembreId")
                        .HasColumnType("int")
                        .HasColumnName("membre_id");

                    b.Property<DateTime?>("PaiementDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("paiement_date");

                    b.Property<decimal?>("PaiementMontant")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("paiement_montant");

                    b.Property<string>("PaiementStatut")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("paiement_statut");

                    b.HasKey("PaiementId");

                    b.HasIndex("MembreId");

                    b.ToTable("Paiement", (string)null);
                });

            modelBuilder.Entity("FitnessApp.Server.Models.Reservation", b =>
                {
                    b.Property<int>("ReservationId")
                        .HasColumnType("int")
                        .HasColumnName("reservation_id");

                    b.Property<int>("CoursId")
                        .HasColumnType("int")
                        .HasColumnName("cours_id");

                    b.Property<int>("MembreId")
                        .HasColumnType("int")
                        .HasColumnName("membre_id");

                    b.Property<DateTime?>("ReservationDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("reservation_date");

                    b.HasKey("ReservationId");

                    b.HasIndex("CoursId");

                    b.HasIndex("MembreId");

                    b.ToTable("Reservation", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("FitnessApp.Server.Models.Cours", b =>
                {
                    b.HasOne("FitnessApp.Server.Models.Coach", "Coach")
                        .WithMany("Cours")
                        .HasForeignKey("CoachId")
                        .IsRequired()
                        .HasConstraintName("FK_Cours_Coach");

                    b.Navigation("Coach");
                });

            modelBuilder.Entity("FitnessApp.Server.Models.Membre", b =>
                {
                    b.HasOne("FitnessApp.Server.Models.Abonnement", "Abonnement")
                        .WithMany("Membres")
                        .HasForeignKey("AbonnementId")
                        .HasConstraintName("FK_Membre_Abonnement");

                    b.Navigation("Abonnement");
                });

            modelBuilder.Entity("FitnessApp.Server.Models.Paiement", b =>
                {
                    b.HasOne("FitnessApp.Server.Models.Membre", "Membre")
                        .WithMany("Paiements")
                        .HasForeignKey("MembreId")
                        .IsRequired()
                        .HasConstraintName("FK_Paiement_Membre");

                    b.Navigation("Membre");
                });

            modelBuilder.Entity("FitnessApp.Server.Models.Reservation", b =>
                {
                    b.HasOne("FitnessApp.Server.Models.Cours", "Cours")
                        .WithMany("Reservations")
                        .HasForeignKey("CoursId")
                        .IsRequired()
                        .HasConstraintName("FK_Reservation_Cours");

                    b.HasOne("FitnessApp.Server.Models.Membre", "Membre")
                        .WithMany("Reservations")
                        .HasForeignKey("MembreId")
                        .IsRequired()
                        .HasConstraintName("FK_Reservation_Membre");

                    b.Navigation("Cours");

                    b.Navigation("Membre");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("FitnessApp.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("FitnessApp.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FitnessApp.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("FitnessApp.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FitnessApp.Server.Models.Abonnement", b =>
                {
                    b.Navigation("Membres");
                });

            modelBuilder.Entity("FitnessApp.Server.Models.Coach", b =>
                {
                    b.Navigation("Cours");
                });

            modelBuilder.Entity("FitnessApp.Server.Models.Cours", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("FitnessApp.Server.Models.Membre", b =>
                {
                    b.Navigation("Paiements");

                    b.Navigation("Reservations");
                });
#pragma warning restore 612, 618
        }
    }
}
